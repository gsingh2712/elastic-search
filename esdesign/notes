
Setup 

Inside elastic-search-7.3.0 

./bin/elasticsearch -Ecluster.name=loonycorn -Enode.name=first_node

Or just ./bin/elasticsearch   -> if config/elasticsearch.yml is set with following values 

By default an index in ES has 5 shards and 1 replica.

------

HEADS UP since 6.0.0 one index can hold one type of document.

Specifying number of shards is static and it can only be done at creation time , however Replicas is dynamic


----

FieldData Types (Various Data types that ES supports)

1.Simple
	text, keyword, date, long, double, boolean, ip
2. Hierarchial
	object , nested (like parnet child relationship)
3. Specilized
	geo_point, geo_shape, completion (for autocomplete)

Dynamic Mapping -> ES can guess datatype if none specfied , this unique feature makes ES appear schemaless

Mapping has direct impact on how searches are performed . How? 
Lets explain by String field search , they can be put for Full text search (individual tokens in the string are searchable)
or they can be mapped to "Keyword search" (whole string values are searchable, no partial matches , entire string is treated as single unit)) 
	full text search -> if string field is specified as datatype text
	keyword search -> if string is specified as datatype string

Creating index book
curl -XPUT 'localhost:9200/books?&pretty'

curl -XPOST 'localhost:9200/books/fiction/1?pretty' -d @books.json -H 'Content-Type: application/json'


Accessing mapping of index -> check how default mapping has identified all the datatypes
curl -XGET 'localhost:9200/books/_mapping?&pretty'

curl -XDELETE 'localhost:9200/books?pretty'

------------

How to set up mapping settings at index creation

dynamic mapping settings -> index_mapping_settings.json
true: New fields are accepted and indexed (default)
false: New fields are accepted but ignored and not indexed 
strict:	New fields are not accepted , exception is thrown


curl -XPUT 'localhost:9200/books?pretty' -d @index_mapping_setting.json -H 'Content-Type: application/json'

--------

Mapping to Relational DB

JOIN in ES is not an option , it uses flat Structure in storing ( an information about search entity should not be split across mutiple entities)
It is preferable to use Application side Joins , there is a way you can achive parent child relationship using diff type of docs in same index
Application side joins are not best way of using pwoer of ES fast search and can be used when indexes have few documents and rarely change , you might have
to as well use cache on the top of it to boost performance.

Data Normalization is more prefrred  over Application joins

Nested Objects is a special Construct in ES for Mapping it to Relational DB

And Entry like this ->
PUT  fan_index/fans/1
{
	"group":"fans",
	"user":[
		{
			"first" : "John", 
			"last" : "Smith"
		},
		{
			"first" : "Alice", 
			"last" : "White"
		}
	]
}

To (array is flattened into a multivalue field) -> check it resulted in information loss, as there is no mapping between first and last name
a relation ship loss in first and last name
{
	"group":"fans",
	"user.first":[ "alice" , "john"], 
	"user.last":[ "Smith" , "White"]	
}

to avoid this we need to map user field as nested field so that logical grouping is preserved and each nested object cna be querried independently of other.

-----
Examples of Nested Json ()

curl -XPUT 'localhost:9200/authors/author/1?pretty' -d @nested.json -H 'Content-Type: application/json'
curl -XPUT 'localhost:9200/authors/author/2?pretty' -d @nested1.json -H 'Content-Type: application/json'
These are created without specifying any mapping hence nested objects will be flattend

curl -XGET 'localhost:9200/authors/author/2?pretty' -H 'Content-Type: application/json' -d'
{
	"query": {
		"bool" : {
			"must" : [
				{ "match": { "books.genre": "YA" } },
				{ "match": { "books.publiser":" Penguin" } }
			]
		}
	}
}'
This querry should result in false match of John green as well but it seems nested mapping is by default enabled it is fixed in version 7.0









